AWSTemplateFormatVersion: 2010-09-09
Description: Serverless backend for todo task applicaiton.
Transform: AWS::Serverless-2016-10-31

Resources:
  #
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          CognitoAuth:
            AuthorizationScopes:
              - email
            Identity:
              Header: Authorization
              ReauthorizeEvery: 60
            UserPoolArn:
              Fn::GetAtt:
                - UserPool
                - Arn
      StageName: prod
      TracingEnabled: true

  createTaskLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/index.createTaskHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Tracing: Active
      Timeout: 100
      Description: Lambda function to create a single Todo task.
      Policies:
        -  DynamoDBWritePolicy:
            TableName : !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
      Events:
        Api:
          Auth:
            Authorizer: CognitoAuth
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  readTaskLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/index.readTaskHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Tracing: Active
      Timeout: 100
      Description: Lambda function to retrieve a single Todo task.
      Policies:
        -  DynamoDBReadPolicy:
            TableName : !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
      Events:
        Api:
          Auth:
            Authorizer: CognitoAuth
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  readTasksLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/index.readTasksHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Tracing: Active
      Timeout: 100
      Description: Lambda function to retreive a list of Todo tasks.
      Policies:
        -  DynamoDBReadPolicy:
            TableName : !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
      Events:
        Api:
          Auth:
            Authorizer: CognitoAuth
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  updateTaskLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/index.updateTaskHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Tracing: Active
      Timeout: 100
      Description: Lambda function to update a single Todo task.
      Policies:
        -  DynamoDBCrudPolicy:
            TableName : !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
      Events:
        Api:
          Auth:
            Authorizer: CognitoAuth
          Type: Api
          Properties:
            Path: /{id}
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi

  deleteTaskLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/index.deleteTaskHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Tracing: Active
      Timeout: 100
      Description: Lambda function to delete a single Todo task.
      Policies:
        -  DynamoDBCrudPolicy:
            TableName : !Ref TodosTable
      Environment:
        Variables:
          TODOS_TABLE: !Ref TodosTable
      Events:
        Api:
          Auth:
            Authorizer: CognitoAuth
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE
            RestApiId:
              Ref: ApiGatewayApi


  TodosTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: Todos

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: serverlesstodos-userpool
      Policies:
        PasswordPolicy: 
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: 
        - email
      Schema: 
        - AttributeDataType: String 
          Name: email 
          Required: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub serverlesstodos-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient 
    Properties: 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit #for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs: [!Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/" ]
      ClientName: !Sub serverlesstodos-UserPoolClient 
      GenerateSecret: true 
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool 


Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient
  
  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com